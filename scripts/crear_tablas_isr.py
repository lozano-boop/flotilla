#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Crea una hoja 'tablas isr' con datos ordenados para todos los meses del año.
Basado en las tarifas ISR 2024 para personas físicas con actividad empresarial.

Uso:
  python3 scripts/crear_tablas_isr.py --excel "$HOME/Desktop/SAT/cedula 2024.xlsx"
"""

import argparse
import os
from pathlib import Path
import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.worksheet.table import Table, TableStyleInfo

# Tarifas ISR 2024 mensuales (ejemplo basado en tarifas oficiales)
# Estructura: [limite_inferior, limite_superior, tasa_porcentaje, cuota_fija]
TARIFAS_MENSUALES = {
    1: [  # Enero
        [0.01, 644.58, 1.92, 0.00],
        [644.59, 5470.92, 6.40, 12.38],
        [5470.93, 9614.66, 10.88, 321.26],
        [9614.67, 11176.62, 16.00, 772.10],
        [11176.63, 13381.47, 17.92, 1022.01],
        [13381.48, 26988.50, 21.36, 1417.12],
        [26988.51, 42537.58, 23.52, 4323.58],
        [42537.59, 81211.25, 30.00, 7980.73],
        [81211.26, 108281.67, 32.00, 20105.74],
        [108281.68, 324845.01, 34.00, 28765.39],
        [324845.02, 999999999.99, 35.00, 101877.24],
    ],
    2: [  # Febrero
        [0.01, 1289.16, 1.92, 0.00],
        [1289.17, 10941.84, 6.40, 24.76],
        [10941.85, 19229.32, 10.88, 642.52],
        [19229.33, 22353.24, 16.00, 1544.20],
        [22353.25, 26762.94, 17.92, 2044.02],
        [26762.95, 53977.00, 21.36, 2834.24],
        [53977.01, 85075.16, 23.52, 8647.16],
        [85075.17, 162422.50, 30.00, 15961.46],
        [162422.51, 216563.34, 32.00, 40211.48],
        [216563.35, 649690.02, 34.00, 57530.78],
        [649690.03, 999999999.99, 35.00, 203754.48],
    ],
    3: [  # Marzo
        [0.01, 1933.74, 1.92, 0.00],
        [1933.75, 16412.76, 6.40, 37.14],
        [16412.77, 28843.98, 10.88, 963.78],
        [28843.99, 33529.86, 16.00, 2316.30],
        [33529.87, 40144.41, 17.92, 3066.03],
        [40144.42, 80965.50, 21.36, 4251.36],
        [80965.51, 127612.74, 23.52, 12970.74],
        [127612.75, 243633.75, 30.00, 23942.19],
        [243633.76, 324845.01, 32.00, 60317.22],
        [324845.02, 974535.03, 34.00, 86296.17],
        [974535.04, 999999999.99, 35.00, 305631.72],
    ],
    4: [  # Abril
        [0.01, 2578.32, 1.92, 0.00],
        [2578.33, 21883.68, 6.40, 49.52],
        [21883.69, 38458.64, 10.88, 1285.04],
        [38458.65, 44706.48, 16.00, 3088.40],
        [44706.49, 53525.88, 17.92, 4088.04],
        [53525.89, 107954.00, 21.36, 5668.48],
        [107954.01, 170150.32, 23.52, 17294.32],
        [170150.33, 324845.01, 30.00, 31922.92],
        [324845.02, 433126.68, 32.00, 80422.96],
        [433126.69, 1299380.04, 34.00, 115061.56],
        [1299380.05, 999999999.99, 35.00, 407508.96],
    ],
    5: [  # Mayo
        [0.01, 3222.90, 1.92, 0.00],
        [3222.91, 27354.60, 6.40, 61.90],
        [27354.61, 48073.30, 10.88, 1606.30],
        [48073.31, 55883.10, 16.00, 3860.50],
        [55883.11, 66907.35, 17.92, 5110.05],
        [66907.36, 134942.50, 21.36, 7085.60],
        [134942.51, 212687.90, 23.52, 21617.90],
        [212687.91, 406056.27, 30.00, 39903.65],
        [406056.28, 541408.35, 32.00, 100528.70],
        [541408.36, 1624225.05, 34.00, 143826.95],
        [1624225.06, 999999999.99, 35.00, 509386.20],
    ],
    6: [  # Junio
        [0.01, 3867.48, 1.92, 0.00],
        [3867.49, 32825.52, 6.40, 74.28],
        [32825.53, 57687.96, 10.88, 1927.56],
        [57687.97, 67059.72, 16.00, 4632.60],
        [67059.73, 80288.82, 17.92, 6132.06],
        [80288.83, 161931.00, 21.36, 8502.72],
        [161931.01, 255225.48, 23.52, 25941.48],
        [255225.49, 487267.52, 30.00, 47884.38],
        [487267.53, 649690.02, 32.00, 120634.44],
        [649690.03, 1949070.06, 34.00, 172592.34],
        [1949070.07, 999999999.99, 35.00, 611263.44],
    ],
    7: [  # Julio
        [0.01, 4512.06, 1.92, 0.00],
        [4512.07, 38296.44, 6.40, 86.66],
        [38296.45, 67302.62, 10.88, 2248.82],
        [67302.63, 78236.34, 16.00, 5404.70],
        [78236.35, 93670.29, 17.92, 7154.07],
        [93670.30, 188919.50, 21.36, 9919.84],
        [188919.51, 297763.06, 23.52, 30265.06],
        [297763.07, 568478.78, 30.00, 55865.11],
        [568478.79, 757971.69, 32.00, 140740.18],
        [757971.70, 2273915.07, 34.00, 201357.73],
        [2273915.08, 999999999.99, 35.00, 713140.68],
    ],
    8: [  # Agosto
        [0.01, 5156.64, 1.92, 0.00],
        [5156.65, 43767.36, 6.40, 99.04],
        [43767.37, 76917.28, 10.88, 2570.08],
        [76917.29, 89412.96, 16.00, 6176.80],
        [89412.97, 107051.76, 17.92, 8176.08],
        [107051.77, 215908.00, 21.36, 11336.96],
        [215908.01, 340300.64, 23.52, 34588.64],
        [340300.65, 649690.02, 30.00, 63845.84],
        [649690.03, 866253.36, 32.00, 160845.92],
        [866253.37, 2598760.08, 34.00, 230123.12],
        [2598760.09, 999999999.99, 35.00, 815017.92],
    ],
    9: [  # Septiembre
        [0.01, 5801.22, 1.92, 0.00],
        [5801.23, 49238.28, 6.40, 111.42],
        [49238.29, 86531.94, 10.88, 2891.34],
        [86531.95, 100589.58, 16.00, 6948.90],
        [100589.59, 120433.23, 17.92, 9198.09],
        [120433.24, 242896.50, 21.36, 12754.08],
        [242896.51, 382838.22, 23.52, 38912.22],
        [382838.23, 730901.27, 30.00, 71826.57],
        [730901.28, 974535.03, 32.00, 180951.66],
        [974535.04, 2923605.09, 34.00, 258888.51],
        [2923605.10, 999999999.99, 35.00, 916895.16],
    ],
    10: [  # Octubre
        [0.01, 6445.80, 1.92, 0.00],
        [6445.81, 54709.20, 6.40, 123.80],
        [54709.21, 96146.60, 10.88, 3212.60],
        [96146.61, 111766.20, 16.00, 7720.00],
        [111766.21, 133814.70, 17.92, 10220.10],
        [133814.71, 269885.00, 21.36, 14171.20],
        [269885.01, 425375.80, 23.52, 43235.80],
        [425375.81, 812112.52, 30.00, 79807.30],
        [812112.53, 1082816.70, 32.00, 201057.40],
        [1082816.71, 3248450.10, 34.00, 287653.90],
        [3248450.11, 999999999.99, 35.00, 1018772.40],
    ],
    11: [  # Noviembre
        [0.01, 7090.38, 1.92, 0.00],
        [7090.39, 60180.12, 6.40, 136.18],
        [60180.13, 105761.26, 10.88, 3533.86],
        [105761.27, 122942.82, 16.00, 8492.10],
        [122942.83, 147196.17, 17.92, 11242.11],
        [147196.18, 296873.50, 21.36, 15588.32],
        [296873.51, 467913.38, 23.52, 47559.38],
        [467913.39, 893323.78, 30.00, 87787.03],
        [893323.79, 1191098.37, 32.00, 221163.14],
        [1191098.38, 3573295.11, 34.00, 316419.29],
        [3573295.12, 999999999.99, 35.00, 1120649.64],
    ],
    12: [  # Diciembre
        [0.01, 7734.96, 1.92, 0.00],
        [7734.97, 65651.04, 6.40, 148.56],
        [65651.05, 115375.92, 10.88, 3855.12],
        [115375.93, 134119.44, 16.00, 9264.20],
        [134119.45, 160577.64, 17.92, 12264.12],
        [160577.65, 323862.00, 21.36, 17005.44],
        [323862.01, 510450.96, 23.52, 51882.96],
        [510450.97, 974535.03, 30.00, 95767.76],
        [974535.04, 1299380.04, 32.00, 241268.88],
        [1299380.05, 3898140.12, 34.00, 345184.68],
        [3898140.13, 999999999.99, 35.00, 1222526.88],
    ]
}

def main():
    ap = argparse.ArgumentParser(description='Crear hoja tablas isr con datos ordenados')
    ap.add_argument('--excel', required=True, help='Ruta del Excel donde crear la hoja')
    args = ap.parse_args()

    excel_path = Path(os.path.expanduser(args.excel)).resolve()

    # Crear DataFrame con todas las tarifas
    rows = []
    for mes, tarifas in TARIFAS_MENSUALES.items():
        for tarifa in tarifas:
            rows.append({
                'mes': mes,
                'limite_inferior': tarifa[0],
                'limite_superior': tarifa[1],
                'tasa': tarifa[2] / 100.0,  # Convertir a proporción
                'cuota_fija': tarifa[3]
            })

    df = pd.DataFrame(rows)

    # Cargar o crear workbook
    if excel_path.exists():
        wb = load_workbook(excel_path)
    else:
        from openpyxl import Workbook
        wb = Workbook()
        default_sheet = wb.active
        wb.remove(default_sheet)

    # Eliminar hoja si existe
    sheet_name = 'tablas isr'
    if sheet_name in wb.sheetnames:
        wb.remove(wb[sheet_name])

    # Crear nueva hoja
    ws = wb.create_sheet(sheet_name)

    # Escribir datos
    ws.append(['TABLAS ISR 2024 - PERSONAS FÍSICAS CON ACTIVIDAD EMPRESARIAL'])
    ws.append(['mes', 'limite_inferior', 'limite_superior', 'tasa', 'cuota_fija'])

    for _, row in df.iterrows():
        ws.append([
            int(row['mes']),
            float(row['limite_inferior']),
            float(row['limite_superior']) if row['limite_superior'] < 999999999 else 999999999.99,
            float(row['tasa']),
            float(row['cuota_fija'])
        ])

    # Crear tabla
    header_row = 2
    last_row = ws.max_row
    if last_row >= header_row + 1:
        ref = f"A{header_row}:E{last_row}"
        try:
            tbl = Table(displayName="TablasISR", ref=ref)
            tbl.tableStyleInfo = TableStyleInfo(name="TableStyleMedium2", showRowStripes=True)
            ws.add_table(tbl)
        except Exception as e:
            print(f"[WARN] No se pudo crear tabla: {e}")

    wb.save(excel_path)
    print(f"[OK] Hoja '{sheet_name}' creada en: {excel_path}")
    print(f"[OK] Registros: {len(df)} | Meses: {df['mes'].nunique()}")

if __name__ == '__main__':
    main()
